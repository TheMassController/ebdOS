Building:
The fundament of the enitre build is arm-gcc-none-eabi:
https://launchpad.net/gcc-arm-embedded/+download
This contains compilers, headers and libs that can be used standalone. 
It also contains a version of newlib, which contain standalone Malloc, printf, sprintf etc. This is very useful, but requires my own implementation of some functions (_write _read _sbrk, etc)

Architecture, etc:
The entire project is created for the Stellars Launchpad LM4F120. 
This product contains a Cortex-M4 CPU with hardware float support. This has the following consequences:
-ARMv7E-M Instruction set
-Thumb Instruction set
And some more extensions. Why are these two important? Because the toolchain delivers newlib compilations for both of them, and, if used incorrectly, they will crash the CPU instead of work. Even though they should both work.

Based on the following document: https://launchpadlibrarian.net/160487135/readme.txt
There are two (four, technically, but lets ignore floating point for now) sets of paramets that we can use for the compiler:
-mthumb -mcpu=cortex-m4
and
-mthumb -march=armv7e-m

The difference seems to be the usable libraries. There are two sets of system libraries (gcc, g, m etc.)
The "Thumb" set. This set is located at:
-/usr/arm-none-eabi/lib/thumb 
-/usr/lib/gcc/arm-none-eabi/4.8.3/thumb/
The "ARMV7E-M" set. This set is located at:
-/usr/arm-none-eabi/lib/armv7e-m/ 
-/usr/lib/gcc/arm-none-eabi/4.8.3/armv7e-m/

There are more versions like armv7-m, armv6, etc. Some should work, some should not. ARM as exellent sources about which instruction set is compatible with which. These two, however, are the official Instruction Sets for the Cortex M4.
And they both work, given the correct compiler options.
NB: compiling will never fail, runtime is when shit happens.

Some tests:
Now its time to test all combinations of params and libraries and see what happens. The basic idea is to check if the program hits _sbrk and if it gets to the while(1)
-mthumb -mcpu=cortex-m4 with the "Thumb" set:
*breakpoint hit



flashing:
lm4flash:
https://github.com/utzig/lm4tools

Debugging:
OpenOCD and arm-none-eabi-gdb
The ARM bare-metal GDB has no clue what the CPU actually is and this cant inspect some registers. So its necessary to talk to openOCD directly trough gdb to get stuff done. Luckily GDB makes this very easy with the monitor command.
See: http://openocd.sourceforge.net/doc/html/General-Commands.html for commands
Example:
"monitor reg" in GDB will dump all registers, not only the ones in the core ARM set (Cortex M3 subset has some registers of its own)
