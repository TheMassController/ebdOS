@This file is temporary. Generated by GCC, no optimalizations
	.syntax unified
	.cpu cortex-m4
	.eabi_attribute 27, 3
	.fpu vfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.thumb
	.file	"scheduling.c"
	.section	.text.pendSVHandler,"ax",%progbits
	.align	2
	.global	pendSVHandler
	.thumb
	.thumb_func
	.type	pendSVHandler, %function
pendSVHandler:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr} @Push r4 and lr to the stack
	sub	sp, sp, #8 
	bl	getMSP
	str	r0, [sp, #4]
	ldr	r3, .L4     @Load L4+0, which is currentprocess (r3 = &currentProcess)
	ldr	r3, [r3]    @Deref (r3 = currentProcess)
    mrs r0, psp     @Move the PSP to R0
    stmdb r0!, {r4-r11}    @Move R4 to R11 to param R0, while decreasing R0
	str	r0, [r3]    @Update the stackpointer of currentProcess (currentProcess->stackPointer = r0)
	ldr	r3, .L4+4   @Load l4+4, which is nextProcess (r3 = &nextProcess)
	ldr	r3, [r3]    @Deref r3 (r3 = nextProcess)
	ldr	r2, [r3]    @Deref r3 (r3 = nextProcess->stackPointer)
    ldmfd   r2! , {r4-r11}      @Move from ram to regs while increasing R0
    msr psp, r2     @push r3 to psp
	ldr	r3, [r3, #4]    @Get the second variable of nextProcess
	cmp	r3, #0      @Test if that var is 0
	bne	.L2         @Branch if it is not 0
	ldr	r3, [sp, #4] @l3 = sp + 4 deref
	adds	r3, r3, #12
	mvn	r2, #6
	str	r2, [r3]
	b	.L3
.L2:
	ldr	r3, [sp, #4]
	adds	r3, r3, #12
	mvn	r2, #2
	str	r2, [r3]
.L3:
	ldr	r3, .L4+4
	ldr	r2, [r3]
	ldr	r3, .L4
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L5:
	.align	2
.L4:
	.word	currentProcess
	.word	nextProcess
	.size	pendSVHandler, .-pendSVHandler
