@This file is temporary. Generated by GCC, no optimalizations
	.syntax unified
	.cpu cortex-m4
	.eabi_attribute 27, 3
	.fpu vfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.thumb
	.file	"scheduling.c"
	.section	.text.pendSVHandler,"ax",%progbits
	.align	2
	.global	pendSVHandler
	.thumb
	.thumb_func
	.type	pendSVHandler, %function
pendSVHandler:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
    
    @Pre-stack-kutting-bs
	push	{lr} @Push r4 and lr to the stack

    @Actual context switch
	ldr	r2, .L4     @Load L4+0, which is currentprocess (r2 = &currentProcess)
	ldr	r1, [r2]    @Deref (r1 = currentProcess)
    mrs r0, psp     @Move the PSP to R0
    stmdb r0!, {r4-r11}    @Move R4 to R11 to param R0, while decreasing R0
	str	r0, [r1]    @Update the stackpointer of currentProcess (currentProcess->stackPointer = r0)
	ldr	r3, .L4+4   @Load l4+4, which is nextProcess (r3 = &nextProcess)
	ldr	r3, [r3]    @Deref r3 (r3 = nextProcess)
	ldr	r0, [r3]    @Deref r3 (r0 = nextProcess->stackPointer)
    ldmfd   r0! , {r4-r11}      @Move from ram to regs while increasing R0
    msr psp, r0     @push r0 to psp

	@str	r3, [r1] @currentProcess = nextProcess
    
    @Decide the returnvar and return
	ldr	r3, [r3, #4]    @Get the second variable of nextProcess
	cmp	r3, #0      @Test if that var is 0
	bne	.L2         @Branch if it is not 0
	mvn	r2, #6  @r2 = 0xFFFFFFF9
	b	.L3
.L2:
	mvn	r2, #2 @r2 = 0xFFFFFFFD
.L3:
	str	r2, [sp] @Push the R2 to the correct place on the stack
	@ sp needed
	pop	{pc} @Pop the modified LR reg to PC
.L5:
	.align	2
.L4:
	.word	currentProcess
	.word	nextProcess
	.size	pendSVHandler, .-pendSVHandler
